"""Add new models

Revision ID: a5203b96572d
Revises: 950475d2e666
Create Date: 2024-12-16 12:21:02.269095

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'a5203b96572d'
down_revision: Union[str, None] = '950475d2e666'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('roles',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('tags',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('permissions',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('role_id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('pricing',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('price_per_day', sa.DECIMAL(), nullable=False),
    sa.Column('tag_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['tag_id'], ['tags.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('technologies',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.Text(), nullable=False),
    sa.Column('tag_id', sa.UUID(), nullable=True),
    sa.ForeignKeyConstraint(['tag_id'], ['tags.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('availability_calendar',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('availability_date', sa.Date(), nullable=False),
    sa.Column('status', sa.Enum('available', 'busy', name='availability_statuses'), nullable=False),
    sa.Column('note', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('milestones',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('project_id', sa.UUID(), nullable=False),
    sa.Column('title', sa.String(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('user_feedback',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('project_id', sa.UUID(), nullable=False),
    sa.Column('feedback', sa.Text(), nullable=False),
    sa.Column('rating', sa.Integer(), nullable=False),
    sa.Column('creation_date', sa.TIMESTAMP(), nullable=False),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.add_column('missions', sa.Column('milestone_id', sa.UUID(), nullable=True))
    op.add_column('missions', sa.Column('technology_id', sa.UUID(), nullable=False))
    op.add_column('missions', sa.Column('due_date', sa.Date(), nullable=False))
    op.add_column('missions', sa.Column('estimated_delivery', sa.Date(), nullable=True))
    op.add_column('missions', sa.Column('estimated_cost', sa.DECIMAL(), nullable=True))
    op.alter_column('missions', 'project_id',
               existing_type=sa.UUID(),
               nullable=False)
    op.create_foreign_key(None, 'missions', 'milestones', ['milestone_id'], ['id'])
    op.create_foreign_key(None, 'missions', 'technologies', ['technology_id'], ['id'])
    op.drop_column('missions', 'technologies')
    op.drop_column('missions', 'end_date')
    op.add_column('projects', sa.Column('creation_date', sa.TIMESTAMP(), nullable=False))
    op.add_column('projects', sa.Column('total_price', sa.DECIMAL(), nullable=True))
    op.alter_column('projects', 'client_id',
               existing_type=sa.UUID(),
               nullable=False)
    op.drop_constraint('projects_admin_id_fkey', 'projects', type_='foreignkey')
    op.drop_column('projects', 'created_at')
    op.drop_column('projects', 'admin_id')
    op.add_column('users', sa.Column('password', sa.String(), nullable=False))
    op.add_column('users', sa.Column('creation_date', sa.TIMESTAMP(), nullable=False))
    op.add_column('users', sa.Column('last_login_date', sa.TIMESTAMP(), nullable=True))
    op.add_column('users', sa.Column('active', sa.Boolean(), nullable=True))
    op.add_column('users', sa.Column('role_id', sa.UUID(), nullable=False))
    op.create_foreign_key(None, 'users', 'roles', ['role_id'], ['id'])
    op.drop_column('users', 'created_at')
    op.drop_column('users', 'hashed_password')
    op.drop_column('users', 'is_active')
    op.drop_column('users', 'role')
    op.drop_column('users', 'last_login_at')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('users', sa.Column('last_login_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('role', postgresql.ENUM('admin', 'developer', 'manager', 'client', name='user_roles'), autoincrement=False, nullable=False))
    op.add_column('users', sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('hashed_password', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.add_column('users', sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'users', type_='foreignkey')
    op.drop_column('users', 'role_id')
    op.drop_column('users', 'active')
    op.drop_column('users', 'last_login_date')
    op.drop_column('users', 'creation_date')
    op.drop_column('users', 'password')
    op.add_column('projects', sa.Column('admin_id', sa.UUID(), autoincrement=False, nullable=True))
    op.add_column('projects', sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False))
    op.create_foreign_key('projects_admin_id_fkey', 'projects', 'users', ['admin_id'], ['id'])
    op.alter_column('projects', 'client_id',
               existing_type=sa.UUID(),
               nullable=True)
    op.drop_column('projects', 'total_price')
    op.drop_column('projects', 'creation_date')
    op.add_column('missions', sa.Column('end_date', sa.DATE(), autoincrement=False, nullable=True))
    op.add_column('missions', sa.Column('technologies', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'missions', type_='foreignkey')
    op.drop_constraint(None, 'missions', type_='foreignkey')
    op.alter_column('missions', 'project_id',
               existing_type=sa.UUID(),
               nullable=True)
    op.drop_column('missions', 'estimated_cost')
    op.drop_column('missions', 'estimated_delivery')
    op.drop_column('missions', 'due_date')
    op.drop_column('missions', 'technology_id')
    op.drop_column('missions', 'milestone_id')
    op.drop_table('user_feedback')
    op.drop_table('milestones')
    op.drop_table('availability_calendar')
    op.drop_table('technologies')
    op.drop_table('pricing')
    op.drop_table('permissions')
    op.drop_table('tags')
    op.drop_table('roles')
    # ### end Alembic commands ###
